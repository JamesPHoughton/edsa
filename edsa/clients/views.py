
__author__    = "Aurora Flight Sciences"
__date__      = "$DATE$"
__rev__       = "$REV$"
__license__   = "GPL v.3"
__copyright__ = """
This file is part of EDSA, the Extensible Dataset Architecture system
Copyright (c) 2010-2011 Aurora Flight Sciences Corp.

Work on EDSA was sponsored by NASA Dryden Flight Research Center
under 2009 STTR contract NNX10CF57P.

EDSA is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free 
Software Foundation; either version 3 of the License, or (at your option) 
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""

from django.shortcuts import render_to_response

from edsa.clients.models import Task
from edsa.utils.subclass import get_subclass_instance
from django.contrib.auth.decorators import login_required


@login_required
def view_tasks(request):
    """ View a list of all tasks that are available, with links
        to run each task on any machines that are hosting it.
    """
    
    context = {}

    tasks = Task.get_available()
    context['tasks_available'] = tasks

    return render_to_response("clients/tasks.html", context)


def run_task(request):
    """ Run a task on a remote machine, based on parameters supplied via 
        GET variables:
        -   id: the primary key of the desired Task
        -   deps: set nonzero to run task dependencies first
        -   machine: machine to run the tool on (or None for random choice)
        -   version: desired version of the underlying tool to run
        -   label: label for log entries that are generated by executing this Task
    """
    
    context = {}
    if 'id' in request.GET:
        task_id = request.GET['id']
        task = get_subclass_instance(Task.objects.get(id=task_id))
        handle_dependencies = (int(request.GET.get('deps', 0)) != 0)
        machine_name = request.GET.get('machine', None)
        local = bool(request.GET.get('local', False))
        label = request.GET.get('label', None)
        version = request.GET.get('version', None)
        result = task.run(handle_dependencies, machine_name, label, version, local)

    context['result'] = result
    return render_to_response("clients/task_status.html", context)

